from typing import Callable, Iterator, Protocol


class OptionProtocol[T](Protocol):
    @property
    def is_some(self) -> bool: ...

    @property
    def is_empty(self) -> bool: ...

    def contains(self, item: T) -> bool: ...
    def expects(self, item: T) -> bool: ...
    def unwrap(self) -> T: ...
    def unwrap_or(self, default: T) -> T: ...
    def unwrap_or_else(self, f: Callable[[], T]) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> T: ...
    def map_or[U](self, default: U, f: Callable[[T], U]) -> T: ...
    def map_or_else[U](self, default: Callable[[], U], f: Callable[[T], U]) -> T: ...
    def iter(self) -> Iterator[T]: ...
    def filter(self, predicate: Callable[[T], bool]) -> "Option[T]": ...
